services:
  # Backend API 서버
  api-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: inventory-api
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
      - ./client/dist:/app/client/dist
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CLIENT_URL=http://localhost:3001
      - JWT_SECRET=your_jwt_secret_here_change_in_production
      - SESSION_SECRET=your_session_secret_here_change_in_production
      - LOG_LEVEL=info
      - MAX_FILE_SIZE=50MB
      - UPLOAD_PATH=./uploads
    restart: unless-stopped
    networks:
      - inventory-network
    # 시놀로지 NAS 최적화 설정
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (React 프로덕션 빌드)
  web-client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: inventory-web
    ports:
      - "80:80"
    volumes:
      - ./client/dist:/usr/share/nginx/html
      - ./logs/nginx:/var/log/nginx
    environment:
      - VITE_API_URL=http://localhost:3001/api
    restart: unless-stopped
    networks:
      - inventory-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  # 데이터 지속성을 위한 볼륨
  inventory_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
      
  inventory_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads
      
  inventory_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

networks:
  inventory-network:
    driver: bridge

# 사용법:
# 1. 시놀로지 NAS에서 SSH 접속
# 2. 프로젝트 디렉토리로 이동
# 3. docker-compose up -d 실행
# 4. http://nas-ip 로 접속