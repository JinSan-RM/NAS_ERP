version: '3.8'

services:
  # PostgreSQL 데이터베이스 (선택사항)
  database:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_system
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - inventory-network

  # Redis (세션 및 캐시용, 선택사항)
  redis:
    image: redis:7-alpine
    container_name: inventory-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - inventory-network

  # Backend API 서버
  api-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: inventory-api
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CLIENT_URL=http://localhost:3000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=inventory_system
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_password
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
      - SESSION_SECRET=your_session_secret_here
      - LOG_LEVEL=info
    depends_on:
      - database
      - redis
    restart: unless-stopped
    networks:
      - inventory-network
    # 시놀로지 NAS 최적화 설정
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend (React 개발 서버)
  web-client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: inventory-web
    ports:
      - "3000:3000"
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=false
    depends_on:
      - api-server
    restart: unless-stopped
    networks:
      - inventory-network
    # 개발 환경에서만 사용
    profiles:
      - development

  # Nginx 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: inventory-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./client/dist:/usr/share/nginx/html
    depends_on:
      - api-server
    restart: unless-stopped
    networks:
      - inventory-network
    # 프로덕션 환경에서만 사용
    profiles:
      - production

  # 모니터링 (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: inventory-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - inventory-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: inventory-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - inventory-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  inventory-network:
    driver: bridge

# 사용법:
# 개발 환경: docker-compose --profile development up -d
# 프로덕션: docker-compose --profile production up -d  
# 모니터링 포함: docker-compose --profile production --profile monitoring up -d